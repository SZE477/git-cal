#!/usr/bin/perl

use strict;
use warnings;
use utf8;

use Getopt::Long;
use Pod::Usage;
use Time::Piece;
use Time::Seconds;
use Data::Dumper;

binmode(STDOUT, ":utf8");

# --- Central data structure ---
my %cal = (
    commits     => {},    # 'YYYY-MM-DD' => count
    start_date  => undef, # Time::Piece object
    end_date    => undef, # Time::Piece object
    max_commits => 0,
    total_commits => 0,
);

# --- Display configuration ---
my @unicode_chars = qw(⬚ ▢ ▤ ▣ ⬛);
my @ansi_colors   = (237, 139, 40, 190, 1); # Grays, Orange, Green shades
my @ascii_chars   = qw(  . o O @);
my @months        = qw(Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec);


# --- Command-line options ---
my ($help, $period, $use_ascii, $use_ansi, $use_unicode, $author, $filepath, $all_branches);

GetOptions(
    'help|?'      => \$help,
    'period|p=s'  => \$period, # Read as string to handle 'all' and negatives
    'ascii'       => \$use_ascii,
    'ansi'        => \$use_ansi,
    'unicode'     => \$use_unicode,
    'author=s'    => \$author,
    'all'         => \$all_branches
) or pod2usage(2);

pod2usage(1) if $help;
$filepath = shift @ARGV;

# --- Process the request ---
process();

# ==============================================================================
# --- Subroutines ---
# ==============================================================================

sub process {
    my $format = determine_format();
    init_cal_stuff();
    process_git_log();
    compute_stats();
    print_grid($format);
}

sub determine_format {
    # Set display format based on flags or environment
    my $format;
    if ($use_ansi)    { $format = 'ansi'; }
    elsif ($use_ascii)  { $format = 'ascii'; }
    elsif ($use_unicode){ $format = 'unicode'; }
    else {
        # Auto-detect if no flags are given
        $format = $ENV{EMACS}       ? 'unicode'
                : $ENV{TERM} eq 'dumb' ? 'ascii'
                : 'ansi';
    }
    return $format;
}

#
# >>>>>>>>>>>>>>>>>>>>>>>>>>>> MODIFIED SUBROUTINE <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
#
sub init_cal_stuff {
    my $today = localtime;

    # Set default period to 12 months if not specified
    $period = 12 unless defined $period;

    # Validate that period is an integer or the word 'all'
    if (lc($period) ne 'all' && $period !~ /^-?\d+$/) {
        die "Error: period must be an integer (e.g., 12 or -36) or 'all'. You provided: $period\n";
    }

    $cal{end_date} = $today;

    if (lc($period) eq 'all') {
        # A reasonable default for 'all' - go back 5 years.
        $cal{start_date} = $today - (ONE_YEAR * 5);
    } else {
        # Handle integer periods (positive or negative)
        # Go back N months from today. abs() treats -36 and 36 the same.
        my $months_to_subtract = abs($period);
        $cal{start_date} = $today->add_months(-$months_to_subtract);
    }

    # The grid must start on a Sunday for alignment.
    # Rewind the calculated start date to the preceding Sunday.
    # ($cal{start_date}->day_of_week % 7) handles both Sunday (0) and US Sunday (7).
    $cal{start_date} -= ($cal{start_date}->day_of_week % 7) * ONE_DAY;
}
#
# >>>>>>>>>>>>>>>>>>>>>>>>> END OF MODIFIED SUBROUTINE <<<<<<<<<<<<<<<<<<<<<<<<<<
#

sub process_git_log {
    my $git_command = build_git_command();
    my @epochs = qx/$git_command/;

    if ($?) {
        # Non-zero exit code from git command
        warn "fatal: git-cal failed to get the git log. Are you in a git repository?\n";
        exit(2);
    }
    if (!@epochs) {
        print "git-cal: No git commits found in the selected period.\n";
        exit(0);
    }

    for my $epoch (@epochs) {
        chomp $epoch;
        my $date = localtime($epoch);
        my $date_key = $date->ymd; # Format as 'YYYY-MM-DD'
        $cal{commits}{$date_key}++;
        $cal{total_commits}++;
    }
}

sub build_git_command {
    # Use epoch seconds for precise filtering
    my $cmd = sprintf(
        q{git log --no-merges --pretty=format:"%%at" --since="%s"},
        $cal{start_date}->epoch
    );
    $cmd .= qq{ --author="$author"} if $author;
    $cmd .= qq{ --all }             if $all_branches;
    $cmd .= qq{ -- $filepath }      if defined $filepath && -e $filepath;
    return $cmd;
}

sub compute_stats {
    return unless $cal{total_commits};
    my @commit_counts = values %{$cal{commits}};
    my $max = 0;
    for (@commit_counts) {
        $max = $_ if $_ > $max;
    }
    $cal{max_commits} = $max;
}

sub print_grid {
    my ($format) = @_;

    # --- Print Header (Months) ---
    print "     "; # Padding
    my $current_month = -1;
    my $cursor_date = $cal{start_date};

    while ($cursor_date <= $cal{end_date}) {
        my $month_num = $cursor_date->mon;  # Get numeric month (1-12)
        if ($month_num != $current_month) {
            print $months[$month_num - 1] . " ";
            $current_month = $month_num;  # Store numeric month
        } else {
            print "   ";
        }
        $cursor_date += ONE_WEEK;
    }
    print "\n";

    # --- Print Grid (Days of Week vs Weeks) ---
    for my $day_of_week (1, 3, 5) { # Sun=0..Sat=6, we print rows for Mon, Wed, Fri
        print $day_of_week == 1 ? " Mon "
            : $day_of_week == 3 ? " Wed "
            : $day_of_week == 5 ? " Fri "
            : "     ";

        my $date_iterator = $cal{start_date} + ($day_of_week * ONE_DAY);

        while ($date_iterator <= $cal{end_date}) {
            my $date_key = $date_iterator->ymd;
            my $commits = $cal{commits}{$date_key} // 0;
            
            # Choose character and color based on commit count
            my $level = 0;
            if ($cal{max_commits} > 0) {
                 # Simple linear scale
                 my $ratio = $commits / $cal{max_commits};
                 if ($ratio > 0.75) { $level = 4; }
                 elsif ($ratio > 0.5) { $level = 3; }
                 elsif ($ratio > 0.25) { $level = 2; }
                 elsif ($ratio > 0) { $level = 1; }
            }

            my $char_to_print;
            if ($format eq 'ansi') {
                my $color = $ansi_colors[$level];
                $char_to_print = "\x1b[38;5;${color}m" . $unicode_chars[$level] . "\x1b[0m";
            }
            elsif ($format eq 'unicode') {
                $char_to_print = $unicode_chars[$level];
            }
            else { # ascii
                $char_to_print = $level > 0 ? $ascii_chars[$level-1] : ' ';
            }
            
            # Don't print characters for days that are before the official start or after the end date
            if ($date_iterator < $cal{start_date}->add_months(abs($period)) && $date_iterator > $cal{end_date}) {
                $char_to_print = ' ';
            }

            print $char_to_print . " ";
            $date_iterator += ONE_WEEK;
        }
        print "\n";
    }

    # --- Print Footer ---
    printf "Total commits in the selected period: %d\n", $cal{total_commits};
}


__END__

=head1 NAME

git-cal - Show a git commit calendar in the terminal.

=head1 SYNOPSIS

git-cal [options] [file_path]

 Options:
   -h, --help           Show this help message.
   -p, --period <N>     Show the last N months (e.g., 12, -36). Defaults to 12. Can be 'all'.
   --author <name>      Filter commits by a specific author.
   --all                Use all branches, not just the current one.
   --ascii              Use ASCII characters for display.
   --ansi               Use ANSI colors (default for most terminals).
   --unicode            Use Unicode box characters without color.

=cut
